name: Update Yuusei Filter and Create Release

on:
  push:
    paths:
      - 'Yuusei.txt'
  schedule:
    - cron: '0 0 * * *'  # Run daily at 00:00 UTC
  workflow_dispatch:
    inputs:
      release_note:
        description: 'Custom release notes'
        required: false
        type: string
      force_update:
        description: 'Force update even if no changes'
        required: false
        type: boolean
        default: false

env:
  FILTER_FILE: Yuusei.txt
  MIN_RULES: 10
  KEEP_RELEASES: 10
  TIMEZONE: "Asia/Ho_Chi_Minh"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        id: setup
        run: |
          # Set timezone
          sudo ln -sf /usr/share/zoneinfo/${{ env.TIMEZONE }} /etc/localtime
          
          # Set date variables
          {
            echo "DATE=$(date +"%d-%m-%Y")"
            echo "TIME=$(date +"%H:%M:%S")"
            echo "RELEASE_DATE=$(date +"%Y.%m.%d")"
            echo "YEAR=$(date +"%Y")"
            echo "REPO_NAME=${GITHUB_REPOSITORY#*/}"
            echo "AUTHOR_NAME=${GITHUB_REPOSITORY%/*}"
          } >> $GITHUB_ENV

      - name: Check existing release
        id: check_release
        run: |
          if gh release view "v${{ env.RELEASE_DATE }}" &>/dev/null; then
            today=$(date -u +%Y-%m-%d)
            created_at=$(gh release view "v${{ env.RELEASE_DATE }}" --json createdAt -q .createdAt)
            release_date=$(date -u -d "$created_at" +%Y-%m-%d)
            
            if [ "$release_date" = "$today" ]; then
              echo "Deleting today's existing release..."
              gh release delete "v${{ env.RELEASE_DATE }}" --yes || true
              echo "EXISTS=false" >> $GITHUB_ENV
            else
              echo "EXISTS=true" >> $GITHUB_ENV
            fi
          else
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Validate filter file
        id: validate
        run: |
          # File existence and size check
          if [ ! -f "${{ env.FILTER_FILE }}" ]; then
            echo "Error: Filter file not found!"
            exit 1
          fi
          
          FILE_SIZE=$(stat -f%z "${{ env.FILTER_FILE }}" 2>/dev/null || stat -c%s "${{ env.FILTER_FILE }}")
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "Error: Filter file is too small!"
            exit 1
          fi
          
          # Header validation
          required_headers=("! Title:" "! Version:" "! Last modified:")
          for header in "${required_headers[@]}"; do
            if ! grep -q "^$header" "${{ env.FILTER_FILE }}"; then
              echo "Error: Missing required header: $header"
              exit 1
            fi
          done
          
          # Rule counting and validation
          RULE_COUNT=$(grep -c "^[^!]" "${{ env.FILTER_FILE }}" || true)
          if [ "$RULE_COUNT" -lt "${{ env.MIN_RULES }}" ]; then
            echo "Error: Insufficient rules (minimum: ${{ env.MIN_RULES }})!"
            exit 1
          fi
          echo "RULE_COUNT=$RULE_COUNT" >> $GITHUB_ENV
          
          # Syntax validation
          SYNTAX_ERRORS=$(grep -n "^[^!#@|]*[^a-zA-Z0-9.*?^$@#|=/,&_-]" "${{ env.FILTER_FILE }}" || true)
          if [ -n "$SYNTAX_ERRORS" ]; then
            echo "Warning: Potential syntax issues found:"
            echo "$SYNTAX_ERRORS"
          fi

      - name: Update filter metadata
        id: update
        run: |
          # Create temp file for updates
          temp_file=$(mktemp)
          
          # Backup original file
          cp "${{ env.FILTER_FILE }}" "${FILTER_FILE}.bak"
          
          # Update metadata
          sed -E "
            s/^! Version:.*/! Version: ${{ env.DATE }}/
            s/^! Last modified:.*/! Last modified: ${{ env.DATE }} ${{ env.TIME }}/
            s/^! Updated by:.*/! Updated by: GitHub Actions/
          " "${{ env.FILTER_FILE }}" > "$temp_file"
          
          # Update checksum
          CHECKSUM=$(sha256sum "$temp_file" | cut -d' ' -f1)
          sed "s/^! Checksum:.*/! Checksum: $CHECKSUM/" "$temp_file" > "${{ env.FILTER_FILE }}"
          
          # Calculate statistics
          {
            echo "NETWORK_RULES=$(grep -c "^||" "${{ env.FILTER_FILE }}" || true)"
            echo "COSMETIC_RULES=$(grep -c "##" "${{ env.FILTER_FILE }}" || true)"
            echo "WHITELIST_RULES=$(grep -c "^@@" "${{ env.FILTER_FILE }}" || true)"
          } >> $GITHUB_ENV
          
          # Check for changes
          if [[ "${{ github.event.inputs.force_update }}" == "true" ]] || ! git diff --quiet "${{ env.FILTER_FILE }}"; then
            echo "CHANGED=true" >> $GITHUB_ENV
          else
            echo "CHANGED=false" >> $GITHUB_ENV
          fi
          
          rm "$temp_file"

      - name: Generate badges
        if: env.CHANGED == 'true'
        run: |
          mkdir -p .github/badges
          
          # Badge generation function
          generate_badge() {
            local label=$1 message=$2 color=$3
            local filename=".github/badges/${label// /_}.json"
            echo "{
              \"schemaVersion\": 1,
              \"label\": \"$label\",
              \"message\": \"$message\",
              \"color\": \"$color\",
              \"style\": \"flat-square\"
            }" > "$filename"
          }
          
          # Generate badges
          generate_badge "version" "${{ env.RELEASE_DATE }}" "blue"
          generate_badge "rules" "${{ env.RULE_COUNT }}" "brightgreen"
          generate_badge "updated" "${{ env.DATE }}" "success"
          generate_badge "network rules" "${{ env.NETWORK_RULES }}" "informational"
          generate_badge "cosmetic rules" "${{ env.COSMETIC_RULES }}" "yellow"
          generate_badge "whitelist rules" "${{ env.WHITELIST_RULES }}" "orange"

      - name: Generate README
        if: env.CHANGED == 'true'
        run: |
          cat > README.md << 'EOF'
          <div align="center">
          
          # 🛡️ Yuusei Filter List
          
          <img src="https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/version.svg" alt="Version">
          <img src="https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/rules.svg" alt="Rules">
          <img src="https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/updated.svg" alt="Updated">
          <img src="https://img.shields.io/badge/license-GPL--3.0-orange?style=flat-square" alt="License">
          
          A powerful and efficient filter list for ad blockers, meticulously maintained and automatically updated.
          
          [📦 Install](#-installation) • [📊 Statistics](#-statistics) • [📝 Features](#-features) • [📜 License](#-license)
          
          </div>
          
          ## 📦 Installation
          
          ### ⚡ Quick Install
          
          <div align="center">
          
          [![Install with uBlock Origin](https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/ublock.svg)](https://raw.githubusercontent.com/${{ github.repository }}/main/Yuusei.txt)
          [![Install with AdGuard](https://raw.githubusercontent.com/${{ github.repository }}/main/.github/badges/adguard.svg)](https://subscribe.adblockplus.org/?location=https://raw.githubusercontent.com/${{ github.repository }}/main/Yuusei.txt)
          
          </div>
          
          ### 🔧 Manual Setup
          ```
          https://raw.githubusercontent.com/${{ github.repository }}/main/Yuusei.txt
          ```
          
          ## 📊 Statistics
          
          ### 📈 Current Status
          
          | Metric | Count |
          |--------|-------|
          | Total Rules | ${{ env.RULE_COUNT }} |
          | Network Rules | ${{ env.NETWORK_RULES }} |
          | Cosmetic Rules | ${{ env.COSMETIC_RULES }} |
          | Whitelist Rules | ${{ env.WHITELIST_RULES }} |
          
          ### ⏰ Update Schedule
          - **Version**: ${{ env.RELEASE_DATE }}
          - **Last Updated**: ${{ env.DATE }} ${{ env.TIME }} (${{ env.TIMEZONE }})
          - **Auto Updates**: Daily at 00:00 UTC
          - **Manual Updates**: On-demand via workflow dispatch
          
          ## 🛡️ Protection Features
          
          ### 🚫 Ad Blocking
          - Comprehensive ad server blocking
          - Sponsored content removal
          - Pop-up & overlay prevention
          
          ### 🔒 Privacy Protection
          - Tracker blocking
          - Anti-fingerprinting
          - Analytics protection
          
          ### ⚡ Performance
          - Faster page loads
          - Reduced bandwidth usage
          - Optimized browsing experience
          
          ### 🔄 Maintenance
          - Automated daily updates
          - Strict validation checks
          - Quick false positive fixes
          
          ## 🤝 Contributing
          
          ### 🐛 Report Issues
          Found a bug? [Open an issue](https://github.com/${{ github.repository }}/issues)
          
          ### 💡 Suggest Rules
          Have ideas? [Create a pull request](https://github.com/${{ github.repository }}/pulls)
          
          ### 💬 Get Help
          Need help? [Join discussions](https://github.com/${{ github.repository }}/discussions)
          
          ## 📜 License
          
          This project is licensed under [GNU GPL v3.0](LICENSE)
          
          ## ⭐ Support
          
          If you find this project helpful:
          - Star the repository
          - Share with others
          - Report issues
          - Contribute improvements
          
          ---
          
          <div align="center">
          
          Made with ❤️ by [Yuusei](https://github.com/${{ env.AUTHOR_NAME }}) | © ${{ env.YEAR }}
          
          <sub>Updated automatically by GitHub Actions 🤖</sub>
          
          </div>
          EOF

      - name: Commit changes
        if: env.CHANGED == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${{ env.FILTER_FILE }}" README.md .github/badges || true
          git commit -m "🔄 Auto update (Version: ${{ env.DATE }})"
          git push

      - name: Create release
        if: env.CHANGED == 'true' && env.EXISTS == 'false'
        run: |
          # Generate changelog
          if [ -n "${{ github.event.inputs.release_note }}" ]; then
            CHANGELOG="${{ github.event.inputs.release_note }}"
          else
            cat << EOF > changelog.md
          ## 🔄 Update Summary (v${{ env.RELEASE_DATE }})
          
          ### 📊 Statistics
          | Metric | Count |
          |--------|-------|
          | Total Rules | ${{ env.RULE_COUNT }} |
          | Network Rules | ${{ env.NETWORK_RULES }} |
          | Cosmetic Rules | ${{ env.COSMETIC_RULES }} |
          | Whitelist Rules | ${{ env.WHITELIST_RULES }} |
          
          ### 🔍 Changes
          - ✨ Updated to version ${{ env.DATE }}
          - 🔒 Updated checksum
          - ✅ Validated all rules
          - 🧹 Optimized filters
          
          ### 📝 Notes
          - 🤖 Automated update via GitHub Actions
          - 🛡️ All rules validated
          - 📈 Performance optimized
          
          ### 📦 Installation
          \`\`\`
          https://raw.githubusercontent.com/${{ github.repository }}/main/Yuusei.txt
          \`\`\`
          EOF
            CHANGELOG=$(cat changelog.md)
          fi
          
          # Create release
          gh release create "v${{ env.RELEASE_DATE }}" \
            --title "📦 Yuusei Filter v${{ env.RELEASE_DATE }}" \
            --notes "$CHANGELOG" \
            --target ${{ github.sha }} \
            "${{ env.FILTER_FILE }}"

      - name: Cleanup old releases
        if: env.CHANGED == 'true'
        run: |
          releases=$(gh release list -L 100 | tail -n +$((${{ env.KEEP_RELEASES }} + 1)) | cut -f1)
          for release in $releases; do
            gh release delete $release --yes || true
          done
