name: Update Yuusei Filter

on:
  push:
    paths:
      - 'Yuusei.txt'
  schedule:
    - cron: '0 0 * * *'  # Run daily at 00:00 UTC
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        required: false
        type: boolean
        default: false

env:
  FILTER_FILE: Yuusei.txt
  MIN_RULES: 10
  TIMEZONE: "Asia/Ho_Chi_Minh"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-filter:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        id: setup
        run: |
          sudo ln -sf /usr/share/zoneinfo/${{ env.TIMEZONE }} /etc/localtime
          {
            echo "DATE=$(date +'%d-%m-%Y')"
            echo "TIME=$(date +'%H:%M:%S')"
            echo "YEAR=$(date +'%Y')"
            echo "REPO_NAME=${GITHUB_REPOSITORY#*/}"
            echo "AUTHOR_NAME=${GITHUB_REPOSITORY%/*}"
          } >> $GITHUB_ENV

      - name: Validate filter file
        id: validate
        run: |
          # Function to log errors
          log_error() {
            echo "::error::$1"
            exit 1
          }

          # Check if file exists
          [ -f "${{ env.FILTER_FILE }}" ] || log_error "Filter file not found!"
          
          # Check file size
          FILE_SIZE=$(stat -f%z "${{ env.FILTER_FILE }}" 2>/dev/null || stat -c%s "${{ env.FILTER_FILE }}")
          [ "$FILE_SIZE" -ge 100 ] || log_error "Filter file is too small!"
          
          # Validate required headers
          required_headers=("! Title:" "! Version:" "! Last modified:")
          for header in "${required_headers[@]}"; do
            grep -q "^$header" "${{ env.FILTER_FILE }}" || log_error "Missing required header: $header"
          done
          
          # Count and validate rules
          RULE_COUNT=$(grep -c "^[^!]" "${{ env.FILTER_FILE }}" || true)
          [ "$RULE_COUNT" -ge "${{ env.MIN_RULES }}" ] || log_error "Insufficient rules (minimum: ${{ env.MIN_RULES }})!"
          echo "RULE_COUNT=$RULE_COUNT" >> $GITHUB_ENV
          
          # Check for syntax issues
          SYNTAX_ERRORS=$(grep -n "^[^!#@|]*[^a-zA-Z0-9.*?^$@#|=/,&_-]" "${{ env.FILTER_FILE }}" || true)
          if [ -n "$SYNTAX_ERRORS" ]; then
            echo "::warning::Potential syntax issues found:"
            echo "$SYNTAX_ERRORS"
          fi

      - name: Update filter metadata
        id: update
        run: |
          # Create temporary file
          temp_file=$(mktemp)
          cp "${{ env.FILTER_FILE }}" "${FILTER_FILE}.bak"
          
          # Update metadata
          sed -E "s/^! Version:.*/! Version: ${{ env.DATE }}/;\
                 s/^! Last modified:.*/! Last modified: ${{ env.DATE }} ${{ env.TIME }}/;\
                 s/^! Updated by:.*/! Updated by: GitHub Actions/" \
          "${{ env.FILTER_FILE }}" > "$temp_file"
          
          # Calculate and update checksum
          CHECKSUM=$(sha256sum "$temp_file" | cut -d' ' -f1)
          sed "s/^! Checksum:.*/! Checksum: $CHECKSUM/" "$temp_file" > "${{ env.FILTER_FILE }}"
          
          # Count rule types
          {
            echo "NETWORK_RULES=$(grep -c "^||" "${{ env.FILTER_FILE }}" || true)"
            echo "COSMETIC_RULES=$(grep -c "##" "${{ env.FILTER_FILE }}" || true)"
            echo "WHITELIST_RULES=$(grep -c "^@@" "${{ env.FILTER_FILE }}" || true)"
          } >> $GITHUB_ENV
          
          # Check for changes
          if [[ "${{ github.event.inputs.force_update }}" == "true" ]] || ! git diff --quiet "${{ env.FILTER_FILE }}"; then
            echo "CHANGED=true" >> $GITHUB_ENV
          else
            echo "CHANGED=false" >> $GITHUB_ENV
          fi
          
          rm "$temp_file"

      - name: Generate badges and README
        if: env.CHANGED == 'true'
        run: |
          mkdir -p .github/badges
          
          # Function to generate badges
          generate_badge() {
            local label=$1 message=$2 color=$3 style=${4:-flat-square}
            local filename=".github/badges/${label// /_}.json"
            echo "{ \"schemaVersion\": 1, \"label\": \"$label\", \"message\": \"$message\", \"color\": \"$color\", \"style\": \"$style\" }" > "$filename"
          }
          
          # Generate all badges
          generate_badge "version" "${{ env.DATE }}" "blue"
          generate_badge "rules" "${{ env.RULE_COUNT }}" "brightgreen"
          generate_badge "updated" "${{ env.DATE }}" "success"
          generate_badge "network rules" "${{ env.NETWORK_RULES }}" "informational"
          generate_badge "cosmetic rules" "${{ env.COSMETIC_RULES }}" "yellow"
          generate_badge "whitelist rules" "${{ env.WHITELIST_RULES }}" "orange"
          generate_badge "ublock" "Install for uBlock Origin" "1a73e8" "for-the-badge"
          generate_badge "adguard" "Install for AdGuard" "67b279" "for-the-badge"
          
          # Generate README
          cat > README.md << 'EOF'
          <div align="center">

          # üõ°Ô∏è Yuusei Filter List
          
          _An advanced filter list for ad blockers with automatic daily updates_
          
          [![Version](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/version.json)](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/Yuusei.txt)
          [![Rules](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/rules.json)](https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/Yuusei.txt)
          [![Updated](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/updated.json)](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/commits/main)
          [![License](https://img.shields.io/badge/license-GPL--3.0-orange?style=flat-square)](LICENSE)
          [![Stars](https://img.shields.io/github/stars/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}?style=flat-square&color=yellow)](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/stargazers)
          
          </div>

          ## üì¶ Quick Installation

          <div align="center">

          [![Install for uBlock Origin](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/ublock.json)](https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/Yuusei.txt)
          [![Install for AdGuard](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/adguard.json)](https://subscribe.adblockplus.org/?location=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/Yuusei.txt)

          </div>

          ### üîó Filter URL
          ```
          https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/Yuusei.txt
          ```

          ## üìä Statistics

          <div align="center">

          | Category | Count | Status |
          |----------|--------|---------|
          | Total Rules | ${{ env.RULE_COUNT }} | ![Rules](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/rules.json) |
          | Network Rules | ${{ env.NETWORK_RULES }} | ![Network](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/network_rules.json) |
          | Cosmetic Rules | ${{ env.COSMETIC_RULES }} | ![Cosmetic](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/cosmetic_rules.json) |
          | Whitelist Rules | ${{ env.WHITELIST_RULES }} | ![Whitelist](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/main/.github/badges/whitelist_rules.json) |

          </div>

          ## üõ°Ô∏è Features

          ### üö´ Advertisement Blocking
          - Complete blocking of ads across websites
          - Removal of sponsored content and promotions
          - Protection against pop-ups and overlays
          - Anti-adblock circumvention

          ### üîí Privacy Protection
          - Blocking of tracking scripts and pixels
          - Prevention of browser fingerprinting
          - Protection from analytics tracking
          - Secure browsing experience

          ### ‚ö° Performance Optimization
          - Faster page loading times
          - Reduced bandwidth usage
          - Cleaner browsing experience
          - Memory usage optimization

          ### üîÑ Maintenance
          - Automatic daily updates
          - Strict quality control
          - Quick issue resolution
          - Regular optimizations

          ## ü§ù Contributing

          <div align="center">

          [![Report Bug](https://img.shields.io/badge/Report%20Bug-Submit%20Issue-red?style=for-the-badge)](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/issues/new?assignees=&labels=bug&template=bug_report.md)
          [![Request Feature](https://img.shields.io/badge/Request%20Feature-Submit%20Idea-blue?style=for-the-badge)](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}/issues/new?assignees=&labels=enhancement&template=feature_request.md)

          </div>

          ## üìú License

          This project is licensed under the [GNU GPL v3.0](LICENSE)

          ## ‚≠ê Support

          If you find this project helpful:
          - Star the repository ‚≠ê
          - Share with others üîÑ
          - Report issues üêõ
          - Contribute improvements üõ†Ô∏è

          ---

          <div align="center">

          Made with ‚ù§Ô∏è by [Yuusei](https://github.com/${{ env.AUTHOR_NAME }}/${{ env.REPO_NAME }}) | ¬© ${{ env.YEAR }}

          <sub>Updated automatically by GitHub Actions</sub>

          _Last updated: ${{ env.DATE }} ${{ env.TIME }} (${{ env.TIMEZONE }})_

          </div>
          EOF

      - name: Commit changes
        if: env.CHANGED == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${{ env.FILTER_FILE }}" README.md .github/badges || true
          git commit -m "üîÑ Auto update (Version: ${{ env.DATE }})"
          git push
